<Window x:Class="Checkers.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Checkers"
        mc:Ignorable="d"
        Title="Checkers Game" Height="600" Width="600"
        MinHeight="400" MinWidth="400"
        Background="{DynamicResource FeltBackgroundBrush}">
    <Window.Resources>
        <!-- Define colors for the checkers board -->
        <SolidColorBrush x:Key="LightSquareColor" Color="#F0D2B4"/> <!-- Light Beige -->
        <SolidColorBrush x:Key="DarkSquareColor" Color="#B58863"/> <!-- Dark Brown -->
        
        <!-- Define standard colors for checkers pieces -->
        <SolidColorBrush x:Key="RedPieceColor" Color="#9E0B0F"/> <!-- Dark Red for pieces -->
        <SolidColorBrush x:Key="BlackPieceColor" Color="#212121"/> <!-- Nearly Black for pieces -->
        <!-- Felt green background behind the board -->
        <SolidColorBrush x:Key="FeltBackgroundBrush" Color="#0B701A"/>
        <!-- Drop shadow effect for board depth -->
        <DropShadowEffect x:Key="BoardDropShadow" Color="Black" BlurRadius="12" ShadowDepth="6" Opacity="0.5"/>

        <!-- Button style for checkers board squares -->
        <Style x:Key="CheckersSquareStyle" TargetType="Button">
            <Setter Property="Padding" Value="0"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <!-- Background layer -->
                            <Border Background="{TemplateBinding Background}"/>
                            <!-- Piece/content layer -->
                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>
                            <!-- Accent border overlay -->
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    IsHitTestVisible="False"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Gradient backgrounds for polished board look -->
        <RadialGradientBrush x:Key="LightSquareGradient" GradientOrigin="0.3,0.3" Center="0.5,0.5" RadiusX="0.6" RadiusY="0.6">
            <GradientStop Color="#FFFBE6" Offset="0.0"/>
            <GradientStop Color="#F0D2B4" Offset="1.0"/>
        </RadialGradientBrush>
        <RadialGradientBrush x:Key="DarkSquareGradient" GradientOrigin="0.7,0.7" Center="0.5,0.5" RadiusX="0.6" RadiusY="0.6">
            <GradientStop Color="#D3B29A" Offset="0.0"/>
            <GradientStop Color="#B58863" Offset="1.0"/>
        </RadialGradientBrush>

        <!-- Animation style for pieces: smooth scale-in when placed -->
        <Style TargetType="local:CheckersPiece">
            <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                </Setter.Value>
            </Setter>
            <!-- Add drop shadow for polished piece look -->
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="#000" BlurRadius="8" ShadowDepth="2" Opacity="0.4"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" From="0.8" To="1" Duration="0:0:0.3"/>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" From="0.8" To="1" Duration="0:0:0.3"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    
    <Grid>
        <!-- Board viewbox with uniform green border -->
        <Viewbox Margin="20" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Border BorderBrush="Black" BorderThickness="2" Background="White" Effect="{DynamicResource BoardDropShadow}">
                <Grid x:Name="CheckersBoard" Width="400" Height="400">
                    <!-- Define 8 rows and 8 columns of equal size -->
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <!-- We'll create the checkers board programmatically in the code-behind -->
                </Grid>
            </Border>
        </Viewbox>
        <!-- Canvas overlay for confetti effect -->
        <Canvas x:Name="ConfettiCanvas" IsHitTestVisible="False" Visibility="Collapsed"/>
    </Grid>
</Window>
